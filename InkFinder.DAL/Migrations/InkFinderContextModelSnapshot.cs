// <auto-generated />
using System;
using InkFinder.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InkFinder.DAL.Migrations
{
    [DbContext(typeof(InkFinderContext))]
    partial class InkFinderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InkFinder.DAL.Entities.ArtworkEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ArtworkEntity");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoleEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8cb9bf8-d585-43f1-be49-884005af78a8"),
                            Name = "PARTICIPANT"
                        },
                        new
                        {
                            Id = new Guid("64a84203-88bb-46b4-a57c-36d673686343"),
                            Name = "MASTER"
                        },
                        new
                        {
                            Id = new Guid("544384bd-9e78-43ff-9e7b-514cb553b6d9"),
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.TatooServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TatooService");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "создание уникального рисунка с учетом пожеланий клиента и его индивидуальных особенностей",
                            Name = "Индивидуальный дизайн татуировки"
                        },
                        new
                        {
                            Id = 2,
                            Description = "помощь в определении подходящего дизайна, который отразит вашу личность и стиль",
                            Name = "Консультация по выбору мотива и стиля"
                        },
                        new
                        {
                            Id = 3,
                            Description = "проработка и улучшение вашей идеи татуировки в сотрудничестве с мастером",
                            Name = "Работа с клиентскими эскизами"
                        },
                        new
                        {
                            Id = 4,
                            Description = "возможность создания татуировки на любой выбранной вами области кожи",
                            Name = "Татуировки на любых частях тела"
                        },
                        new
                        {
                            Id = 5,
                            Description = "возможность исправления и улучшения существующих татуировок",
                            Name = "Коррекция и доработка старых тату"
                        },
                        new
                        {
                            Id = 6,
                            Description = "профессиональное удаление татуировок без следов и рубцов",
                            Name = "Удаление нежелательных татуировок"
                        },
                        new
                        {
                            Id = 7,
                            Description = "выбор временных вариантов татуировок для тех, кто хочет испытать новый образ временно",
                            Name = "Временные татуировки и хной"
                        },
                        new
                        {
                            Id = 8,
                            Description = "рекомендации и средства для максимально комфортного заживления кожи после татуировки",
                            Name = "Уход и реабилитация после процедуры"
                        },
                        new
                        {
                            Id = 9,
                            Description = "обучение и повышение квалификации в сфере татуировки по индивидуальной программе",
                            Name = "Услуги мастерства и обучения"
                        },
                        new
                        {
                            Id = 10,
                            Description = "участие в мероприятиях и выставках, где вы сможете увидеть работы талантливых мастеров и получить новые впечатления",
                            Name = "Проведение тематических мероприятий и выставок"
                        });
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.TatooSignUpEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid?>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TatooSignUp");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GenericSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.UserToRoleRelation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserToRole");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.WorkSheetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkSheet");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.ArtworkEntity", b =>
                {
                    b.HasOne("InkFinder.DAL.Entities.UserEntity", "Creator")
                        .WithMany("Artworks")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.TatooSignUpEntity", b =>
                {
                    b.HasOne("InkFinder.DAL.Entities.UserEntity", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId");

                    b.HasOne("InkFinder.DAL.Entities.UserEntity", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InkFinder.DAL.Entities.TatooServiceEntity", "Service")
                        .WithMany("SignUps")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("Participant");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.UserToRoleRelation", b =>
                {
                    b.HasOne("InkFinder.DAL.Entities.RoleEntity", "Role")
                        .WithMany("UserToRoleRelations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InkFinder.DAL.Entities.UserEntity", "User")
                        .WithMany("UserToRoleRelations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.WorkSheetEntity", b =>
                {
                    b.HasOne("InkFinder.DAL.Entities.UserEntity", "User")
                        .WithMany("WorkSheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserToRoleRelations");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.TatooServiceEntity", b =>
                {
                    b.Navigation("SignUps");
                });

            modelBuilder.Entity("InkFinder.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("UserToRoleRelations");

                    b.Navigation("WorkSheets");
                });
#pragma warning restore 612, 618
        }
    }
}
